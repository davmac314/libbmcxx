#ifndef LIBBMCXX_UTILITY_INCLUDED
#define LIBBMCXX_UTILITY_INCLUDED 1

#include <type_traits>

namespace std {

// This is deliberately a declaration without any definition.
template <class T> T&& declval() noexcept;

template <class T>
typename remove_reference<T>::type&& move(T&& t) noexcept
{
    return static_cast<typename remove_reference<T>::type &&>(t);
}

template <class T>
using remove_reference_t = typename remove_reference<T>::type;

template <class T>
constexpr T&& forward(remove_reference_t<T>& t) noexcept
{
    return static_cast<T&&>(t);
}

template <class T>
constexpr T&& forward(std::remove_reference_t<T>&& t) noexcept
{
    return static_cast<T&&>(t);
}

} // namespace std

#endif
