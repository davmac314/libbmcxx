#ifndef LIBBMCXX_MEMORY_INCLUDED
#define LIBBMCXX_MEMORY_INCLUDED 1

#include <type_traits>
#include <utility>
#include <new>

namespace std {

template <class T> struct default_delete {
    constexpr default_delete() noexcept = default;

    template <class U, typename E = typename enable_if_t<is_convertible<U*, T*>::value>::type>
    default_delete(const default_delete<U> &other) noexcept { }

    void operator()(T *t) const noexcept { delete t; }

    char __empty[0]; // make zero-sized
};

template <class T> struct default_delete<T[]> {
    constexpr default_delete() noexcept = default;

    template <class U, typename = typename enable_if_t<is_convertible<U(*)[], T(*)[]>::value>::type>
    default_delete(const default_delete<U[]> &other) noexcept { }

    template <typename U, typename = typename enable_if_t<is_convertible<U(*)[], T(*)[]>::value>::type>
    void operator()(T *t) const noexcept { delete[] t; }

    char __empty[0]; // make zero-sized
};

namespace libbmcxx_memory {

template <typename T>
T&& declval();

// deleter_pointer<Deleter,T>::type - the 'pointer' member of the specified Deleter if it exists,
//  or 'T *' otherwise

template <class Deleter, class T, typename = void>
struct deleter_pointer
{
    using type = T *;
};

template <class Deleter, class T>
struct deleter_pointer<Deleter, T,
        decltype(void(declval<typename std::remove_reference<Deleter>::type::pointer>()))>
{
    using type = typename std::remove_reference<Deleter>::type::pointer;
};

} // libbmcxx_memory

template <class T, class Deleter = std::default_delete<T>>
class unique_ptr {
public:
    using pointer = typename libbmcxx_memory::deleter_pointer<Deleter, T>::type;
    using element_type = T;
    using deleter_type = Deleter;

private:
    pointer __underlying_ptr = pointer();
    deleter_type __deleter;

public:
    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_default_constructible<D>::value>>
    constexpr unique_ptr() noexcept : __deleter({}) {}

    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_default_constructible<D>::value>>
    constexpr unique_ptr(decltype(nullptr)) noexcept : __deleter({}) {}

    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_default_constructible<D>::value>>
    explicit unique_ptr(pointer p) noexcept : __underlying_ptr(p) {}

    // note 'const deleter_t &d' will collapse to a non-const if deleter_t is non-const ref
    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_copy_constructible<D>::value
            || is_reference<D>::value>>
    unique_ptr(pointer p, const deleter_type &d) noexcept
        : __underlying_ptr(p), __deleter(forward<decltype(d)>(d)) {}

    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_move_constructible<D>::value
            && !is_reference<D>::value>>
    unique_ptr(pointer p, deleter_type &&d) noexcept
        : __underlying_ptr(p), __deleter(forward<decltype(d)>(d)) {}

    template <typename D = Deleter,
            typename = enable_if_t<is_reference<D>::value>>
    unique_ptr(pointer p, typename remove_reference<D>::type &&d) = delete;

    unique_ptr(unique_ptr &&other) noexcept
        : __underlying_ptr(other.release()), __deleter(other.__deleter) {}

    unique_ptr &operator=(decltype(nullptr)) noexcept
    {
        if (__underlying_ptr) __deleter(__underlying_ptr);
        __underlying_ptr = nullptr;
        return *this;
    }

    bool operator==(decltype(nullptr)) noexcept { return __underlying_ptr == nullptr; }

    add_lvalue_reference_t<T> operator*() noexcept { return *__underlying_ptr; }
    T *operator->() noexcept { return __underlying_ptr; }

    operator bool() noexcept { return __underlying_ptr != nullptr; }

    pointer release() noexcept
    {
        auto r = __underlying_ptr;
        __underlying_ptr = pointer();
        return r;
    }

    void reset(pointer ptr = pointer()) noexcept
    {
        auto __old_ptr = __underlying_ptr;
        __underlying_ptr = ptr;
        if (__old_ptr) __deleter(__old_ptr);
    }

    unique_ptr &operator=(unique_ptr &&other) noexcept
    {
        reset();
        __underlying_ptr = other.release();
        __deleter = forward<Deleter>(other.__deleter);
        return *this;
    }

    pointer get() noexcept
    {
        return __underlying_ptr;
    }

    deleter_type &get_deleter() noexcept { return __deleter; }
    const deleter_type &get_deleter() const noexcept { return __deleter; }

    ~unique_ptr()
    {
        if (__underlying_ptr) __deleter(__underlying_ptr);
    }
};

template <class T, class Deleter>
class unique_ptr<T[],Deleter> {
public:
    using pointer = typename libbmcxx_memory::deleter_pointer<Deleter, T>::type;
    using element_type = T;
    using deleter_type = Deleter;

private:
    pointer __underlying_ptr = nullptr;
    deleter_type __deleter;

public:
    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_default_constructible<D>::value>>
    constexpr unique_ptr() noexcept : __deleter({}) {}

    template <typename D = Deleter,
            typename = enable_if_t<is_nothrow_default_constructible<D>::value>>
    constexpr unique_ptr(decltype(nullptr)) noexcept : __deleter({}) {}

    template <typename U,
            typename D = Deleter,
            typename = enable_if_t<is_nothrow_default_constructible<D>::value>>
    explicit unique_ptr(U p) noexcept : __underlying_ptr(p) {}

    template <typename U,
            typename D = Deleter,
            typename = enable_if_t<is_nothrow_copy_constructible<D>::value
            || is_reference<D>::value>>
    unique_ptr(U p, const deleter_type &d) noexcept
        : __underlying_ptr(p), __deleter(forward<decltype(d)>(d)) {}

    template <typename U,
            typename D = Deleter,
            typename = enable_if_t<is_nothrow_move_constructible<D>::value
            && !is_reference<D>::value>>
    unique_ptr(U p, deleter_type &&d) noexcept
        : __underlying_ptr(p), __deleter(forward<decltype(d)>(d)) {}

    template <typename U,
            typename D = Deleter,
            typename = enable_if_t<is_reference<D>::value>>
    unique_ptr(U p, typename remove_reference<D>::type &&d) = delete;

    unique_ptr(unique_ptr &&other) noexcept
        : __underlying_ptr(other.release()), __deleter(other.__deleter) {}

    unique_ptr &operator=(decltype(nullptr)) noexcept
    {
        if (__underlying_ptr) __deleter(__underlying_ptr);
        __underlying_ptr = nullptr;
        return *this;
    }

    bool operator==(decltype(nullptr)) noexcept { return __underlying_ptr == nullptr; }

    pointer release() noexcept
    {
        auto r = __underlying_ptr;
        __underlying_ptr = nullptr;
        return r;
    }

    void reset(pointer ptr = pointer()) noexcept
    {
        auto __old_ptr = __underlying_ptr;
        __underlying_ptr = ptr;
        if (__old_ptr) __deleter(__old_ptr);
    }

    pointer get() noexcept
    {
        return __underlying_ptr;
    }

    ~unique_ptr()
    {
        if (__underlying_ptr) __deleter(__underlying_ptr);
    }
};


template <class T, class... Args>
unique_ptr<enable_if_t<!is_array<T>::value,T>> make_unique(Args&&... args) {
    return unique_ptr<T>(new T(args...));
}

template <class T>
unique_ptr<enable_if_t<is_array<T>::value,T>> make_unique(decltype(sizeof(int)) size) {
    return unique_ptr<T>(new remove_extent_t<T>[size]);
}

// Shared ptr

struct __deleter_wrapper_base
{
    virtual void operator()(void *t) = 0;
    virtual ~__deleter_wrapper_base() {}
};

// control block
struct __control_block
{
    void *object_ptr;
    __deleter_wrapper_base *deleter;
    unsigned count;
    bool separate_object; // if true, object allocated separately

    // deleter wrapper object is always located here!

    // owned object may follow.

    // Make a control block with specified deleter wrapper
    template <typename D>
    static __control_block *make_cb(const D &d)
    {
        using size_t = decltype(sizeof(0));
        size_t ad = alignof(d);
        size_t del_offs = ((sizeof(__control_block) + ad - 1) / ad) * ad;

        size_t total_sz = del_offs + sizeof(d);

        char *cbc = new char[total_sz];
        __control_block *cb = new (cbc) __control_block;
        cb->separate_object = true;
        cb->count = 1;
        cb->object_ptr = nullptr;

        cb->deleter = new (cbc + del_offs) D(d);

        return cb;
    }

    void delete_object()
    {
        (*deleter)(object_ptr);
        deleter->__deleter_wrapper_base::~__deleter_wrapper_base();
    }
};

template <typename T>
struct __standard_deleter_wrapper : __deleter_wrapper_base
{
    void operator()(void *t) override
    {
        delete ((T *)t);
    }

    ~__standard_deleter_wrapper() override {}
};

template <typename T>
struct __standard_deleter_wrapper<T[]> : __deleter_wrapper_base
{
    void operator()(void *t) override
    {
        delete[] ((T *)t);
    }

    ~__standard_deleter_wrapper() override {}
};

template <class T>
class shared_ptr;

template <typename T>
__control_block *__get_cb(const shared_ptr<T> &sp)
{
    return sp.__underlying_cb;
}

template <class T>
class shared_ptr {
public:
    using element_type = remove_extent_t<T>;

private:
    __control_block *__underlying_cb;

public:
    shared_ptr() noexcept : __underlying_cb(nullptr) {}
    shared_ptr(decltype(nullptr)) noexcept : __underlying_cb(nullptr) {}

    template <class U>
    shared_ptr(U *u)
    {
        __underlying_cb = __control_block::make_cb(__standard_deleter_wrapper<U>());
        __underlying_cb->object_ptr = u;
    }

    template <class U, typename = typename enable_if<is_convertible<U*,T*>::value>::type>
    shared_ptr(const shared_ptr<U> &o)
    {
        __underlying_cb = __get_cb(o);
        if (__underlying_cb) {
            __underlying_cb->count++;
        }
    }

    ~shared_ptr() { reset(); }

    element_type &operator*() { return *(element_type *)(__underlying_cb->object_ptr); }
    element_type *operator->() { (element_type *)(__underlying_cb->object_ptr); }
    element_type &operator[](size_t i) { return ((element_type *)(__underlying_cb->object_ptr))[i]; }

    T *get() { return **this; }

    void reset() noexcept
    {
        if (__underlying_cb) {
            if (--__underlying_cb->count == 0) {
                __underlying_cb->delete_object();
                char *cbarea = (char *)__underlying_cb;
                delete[] cbarea;
            }
        }
    }

    template <class U, typename = typename enable_if<is_convertible<U*,T*>::value>::type>
    void reset(U *u) {
        reset();
        __underlying_cb = __control_block::make_cb(__standard_deleter_wrapper<U>());
        __underlying_cb->object_ptr = u;
    }

    template <class U, typename = typename enable_if<is_convertible<U*,T*>::value>::type>
    shared_ptr &operator=(const shared_ptr<U> &other)
    {
        auto othercb = __get_cb(other);
        if (othercb == __underlying_cb) return *this;
        reset();
        __underlying_cb = othercb;
        if (__underlying_cb) {
            __underlying_cb->count++;
        }
    }
};

template <typename T, typename ... Args>
enable_if_t<!is_array<T>::value, shared_ptr<T>> make_shared(Args&&... arg)
{
    // TODO embed object in control block
    return shared_ptr<T>(new T(forward<Args>(arg)...));
}

template <typename T>
enable_if_t<is_unbounded_array<T>::value, shared_ptr<T>> make_shared(size_t N)
{
    // TODO embed object in control block
    return shared_ptr<T>((T *) new typename std::remove_extent<T>::type[N]);
}

template <typename T>
enable_if_t<is_bounded_array<T>::value, shared_ptr<T>> make_shared()
{
    // TODO embed object in control block
    return shared_ptr<T>((T *) new T);
}

} // namespace std

#endif
