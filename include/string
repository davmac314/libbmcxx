#ifndef LIBBMCXX_STRING_INCLUDED
#define LIBBMCXX_STRING_INCLUDED 1

#include <vector>
#include <algorithm>
#include <string_view>

namespace std {

template <class CharT, class Traits = char_traits<CharT>>
class basic_string
{
    vector<CharT> __backing;

    // used for c_str()/data() when no allocation made:
    // TODO for standard character types, at least, we should be able to keep this in a global instead
    const CharT &__get_empty() const
    {
        static CharT __empty = CharT();
        return __empty;
    }

public:
    using value_type = CharT;
    using traits_type = Traits;
    using size_type = decltype(sizeof(0));
    using reference = value_type &;
    using const_reference = const value_type &;
    using pointer = value_type *;
    using const_pointer = const value_type *;
    using iterator = typename vector<value_type>::iterator;
    using const_iterator = typename vector<value_type>::const_iterator;

    basic_string() noexcept {}
    basic_string(const_pointer v, size_type len)
    {
        __backing.reserve(len + 1);
        for (size_type i = 0; i < len; i++) {
            __backing.push_back(v[i]);
        }
        __backing.push_back(value_type());
    }
    basic_string(const_pointer v) : basic_string(v, traits_type::length(v)) { }
    basic_string(const basic_string &other) = default;
    basic_string(basic_string &&other) = default;

    constexpr const_pointer c_str() const
    {
        if (__backing.empty()) return &__get_empty();
        return __backing.data();
    }
    constexpr const_pointer data() const { return c_str(); }

    constexpr size_type length() const { return max(size_type(1), __backing.size()) - 1; }
    constexpr size_type size() const { return length(); }
    constexpr bool empty() const { return length() == 0; }

    constexpr iterator begin() { return c_str(); }
    constexpr iterator end() { return c_str() + length(); }
    constexpr const_iterator begin() const { return c_str();; }
    constexpr const_iterator end() const { return c_str() + length(); }
    constexpr const_iterator cbegin() const { return c_str(); }
    constexpr const_iterator cend() const { return c_str() + length(); }

    constexpr basic_string &operator=(const basic_string &other) = default;
    constexpr basic_string &operator=(basic_string &&other)
    {
        __backing = std::move(other.__backing);
        return *this;
    }
    constexpr basic_string &operator+=(value_type ch) { return append(ch); }
    constexpr basic_string &operator+=(const basic_string &other) { return append(other); }
    constexpr basic_string &operator+=(const_pointer other) { return append(other); }

    constexpr reference operator[](size_type pos) { return c_str()[pos]; }
    constexpr const_reference operator[](size_type pos) const { return c_str()[pos]; }

    constexpr int compare(const basic_string &str) const noexcept
    {
        size_type rlen = min(length(), str.length());
        int r = traits_type::compare(c_str(), str.c_str(), rlen);
        if (r == 0) {
            if (length() < str.length()) return -1;
            if (length() > str.length()) return 1;
        }
        return r;
    }

    constexpr int compare(const value_type *p) const noexcept
    {
        size_type i = 0;
        while (p[i] != value_type()) {
            if (i > length()) {
                return -1;
            }
            const value_type &c = c_str()[i];
            if (c < p[i]) return -1;
            if (c > p[i]) return 1;
            i++;
        }
        if (i == length()) return 0;
        return 1;
    }

    constexpr basic_string &append(value_type ch)
    {
        if (__backing.size() == 0) __backing.emplace_back();
        size_type len = length();
        __backing.emplace_back(); // append nul terminator
        __backing[len] = ch;
        return *this;
    }

    constexpr basic_string &append(const basic_string &str)
    {
        __backing.reserve(size() + str.size() + 1);
        if (!__backing.empty()) {
            __backing.pop_back(); // pop nul terminator
        }
        for (size_type i = 0; i < str.size(); ++i) {
            __backing.push_back(str[i]);
        }
        __backing.emplace_back(); // append nul terminator
        return *this;
    }

    constexpr basic_string &append(const_pointer strz)
    {
        size_type strz_len = traits_type::length(strz);
        __backing.reserve(size() + strz_len + 1);
        if (!__backing.empty()) {
            __backing.pop_back(); // pop nul terminator
        }
        for (size_type i = 0; i < strz_len; ++i) {
            __backing.push_back(strz[i]);
        }
        __backing.emplace_back(); // append nul terminator
        return *this;
    }

    template <typename T>
    constexpr enable_if_t<is_convertible<const T&, basic_string_view<CharT,Traits>>::value, int>
    compare(const T &other) const
    {
        basic_string_view<value_type, traits_type> sv = other;
        basic_string_view<value_type, traits_type> tv { c_str(), length() };
        return tv.compare(sv);
    }
};

using string = basic_string<char>;
using wstring = basic_string<wchar_t>;
using u16string = basic_string<char16_t>;
using u32string = basic_string<char32_t>;

template <class CharT, class Traits>
constexpr bool operator==(const basic_string<CharT,Traits> &a, const basic_string<CharT,Traits> &b) noexcept
{ return a.compare(b) == 0; }
template <class CharT, class Traits>
constexpr bool operator!=(const basic_string<CharT,Traits> &a, const basic_string<CharT,Traits> &b) noexcept
{ return a.compare(b) != 0; }
template <class CharT, class Traits>
constexpr bool operator<(const basic_string<CharT,Traits> &a, const basic_string<CharT,Traits> &b) noexcept
{ return a.compare(b) < 0; }
template <class CharT, class Traits>
constexpr bool operator<=(const basic_string<CharT,Traits> &a, const basic_string<CharT,Traits> &b) noexcept
{ return a.compare(b) <= 0; }
template <class CharT, class Traits>
constexpr bool operator>(const basic_string<CharT,Traits> &a, const basic_string<CharT,Traits> &b) noexcept
{ return a.compare(b) > 0; }
template <class CharT, class Traits>
constexpr bool operator>=(const basic_string<CharT,Traits> &a, const basic_string<CharT,Traits> &b) noexcept
{ return a.compare(b) >= 0; }

template <class CharT, class Traits>
constexpr bool operator==(const basic_string<CharT,Traits> &a, const CharT *b) noexcept
{ return a.compare(b) == 0; }
template <class CharT, class Traits>
constexpr bool operator!=(const basic_string<CharT,Traits> &a, const CharT *b) noexcept
{ return a.compare(b) != 0; }
template <class CharT, class Traits>
constexpr bool operator<(const basic_string<CharT,Traits> &a, const CharT *b) noexcept
{ return a.compare(b) < 0; }
template <class CharT, class Traits>
constexpr bool operator<=(const basic_string<CharT,Traits> &a, const CharT *b) noexcept
{ return a.compare(b) <= 0; }
template <class CharT, class Traits>
constexpr bool operator>(const basic_string<CharT,Traits> &a, const CharT *b) noexcept
{ return a.compare(b) > 0; }
template <class CharT, class Traits>
constexpr bool operator>=(const basic_string<CharT,Traits> &a, const CharT *b) noexcept
{ return a.compare(b) >= 0; }

template <class CharT, class Traits>
constexpr bool operator==(const CharT *a, const basic_string<CharT,Traits> &b) noexcept
{ return b.compare(a) == 0; }
template <class CharT, class Traits>
constexpr bool operator!=(const CharT *a, const basic_string<CharT,Traits> &b) noexcept
{ return b.compare(a) != 0; }
template <class CharT, class Traits>
constexpr bool operator<(const CharT *a, const basic_string<CharT,Traits> &b) noexcept
{ return b.compare(a) > 0; }
template <class CharT, class Traits>
constexpr bool operator<=(const CharT *a, const basic_string<CharT,Traits> &b) noexcept
{ return b.compare(a) >= 0; }
template <class CharT, class Traits>
constexpr bool operator>(const CharT *a, const basic_string<CharT,Traits> &b) noexcept
{ return b.compare(a) < 0; }
template <class CharT, class Traits>
constexpr bool operator>=(const CharT *a, const basic_string<CharT,Traits> &b) noexcept
{ return b.compare(a) <= 0; }

} // namespace std

#endif
